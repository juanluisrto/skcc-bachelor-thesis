package com.slagkryssaren.skcc.android;

import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;


import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.slagkryssaren.skcc.android.models.TfLiteModel;
import com.slagkryssaren.skcc.android.models.TfMobileModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.Viewport;
import lecho.lib.hellocharts.view.Chart;
import lecho.lib.hellocharts.view.LineChartView;

import static com.slagkryssaren.skcc.android.MainActivity.adapter;

public class StatsActivity extends BaseActivity {

    //SharedPreferences stats;
    SharedPreferences  mPrefs;
    LineChartView chart;
    public List<PointValue> tfliteValues;
    public List<PointValue> tfMobileValues;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mPrefs = getSharedPreferences("chart",MODE_PRIVATE);
        chart = (LineChartView) findViewById(R.id.chart);//new LineChartView(getApplicationContext());
        chart.setInteractive(true);
        chart.setZoomType(ZoomType.HORIZONTAL_AND_VERTICAL);
    }

    @Override
    int getContentViewId() {
        return R.layout.activity_stats;
    }

    @Override
    int getNavigationMenuItemId() {
        return R.id.stats;
    }

    @Override
    protected void onResume() {
        super.onResume();
        MainActivity.syncValues(adapter.tfMobileModel);
        MainActivity.syncValues(adapter.tfLiteModel);

        Gson gson = new Gson();
        Type listType = new TypeToken<ArrayList<PointValue>>(){}.getType();
        String tfliteJson = mPrefs.getString(TfLiteModel.class.getName(), "");
        String tfMobileJson = mPrefs.getString(TfMobileModel.class.getName(), "");
        tfliteValues = gson.fromJson(tfliteJson,listType);
        tfMobileValues = gson.fromJson(tfMobileJson,listType);

        float maxNumberOfPoints = 20;
        try {
            maxNumberOfPoints = Math.max(tfliteValues.size(), tfMobileValues.size());
        }catch (NullPointerException e){
            e.printStackTrace();
        }

        Line lineLite = new Line(tfliteValues).setColor(Color.RED).setCubic(false).setHasLines(false);
        Line lineMobile = new Line(tfMobileValues).setColor(Color.BLUE).setCubic(false).setHasLines(false);
        List<Line> lines = new ArrayList<Line>();
        lines.add(lineLite);
        lines.add(lineMobile);
        LineChartData data = new LineChartData();

        Axis axisX = Axis.generateAxisFromRange(0,maxNumberOfPoints,1).setName("Picture").setAutoGenerated(false);
        Axis axisY = new Axis().setName("Time (ms)").setHasLines(true).setAutoGenerated(true).setMaxLabelChars(4);
        data.setAxisXBottom(axisX);
        data.setAxisYLeft(axisY);
        data.setLines(lines);

        chart.setZoomEnabled(true);
        chart.setLineChartData(data);
        final Viewport v = new Viewport(chart.getMaximumViewport());
        try {
            v.bottom = Math.min(tfliteValues.get(0).getY(), tfMobileValues.get(0).getY()) - 300;
            v.top = Math.max(tfliteValues.get(0).getY(), tfMobileValues.get(0).getY()) + 300;
        } catch (IndexOutOfBoundsException e){
            Log.e("error",e.getMessage());
        }
        chart.setMaximumViewport(v);



    }

}
